{"version":3,"sources":["components/WeatherInfo.js","components/WeatherForm.js","images/cloud.svg","App.js","reportWebVitals.js","index.js","Keys.js"],"names":["WeatherInfo","props","console","log","className","error","temperature","city","country","description","humidity","temparature","WeatherForm","onSubmit","getWeather","type","name","placeholder","autoFocus","App","state","wind_speed","e","a","preventDefault","target","elements","cityValue","value","countryValue","API_URL","WEATHER_KEY","fetch","response","json","data","setState","main","temp","weather","wind","speed","sys","src","cloud","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uTA8DeA,EA3DK,SAAAC,GAMhB,OAJAC,QAAQC,IAAIF,GAKV,sBAAKG,UAAU,aAAf,UAEeH,EAAMI,OACH,qBAAKD,UAAU,qBAAf,SACK,4BAAIH,EAAMI,UAInBJ,EAAMK,YAAY,EAClB,sBAAKF,UAAU,iBAAf,UACT,2CACeH,EAAMM,KADrB,KAC6BN,EAAMO,WAEnC,oBAAGJ,UAAU,YAAb,0BACkBH,EAAMK,YADxB,SACwCL,EAAMQ,eAE9C,2CACeR,EAAMS,SADrB,UAKH,wBAKIT,EAAMU,aAAa,EACnB,sBAAKP,UAAU,iBAAf,UACA,2CACeH,EAAMM,KADrB,KAC6BN,EAAMO,WAEnC,oBAAGJ,UAAU,aAAb,0BACkBH,EAAMK,YADxB,SACwCL,EAAMQ,eAE9C,2CACeR,EAAMS,SADrB,UAKH,4BCfME,G,MA7BK,SAACX,GAAD,OAChB,qBAAKG,UAAU,cAAf,SACI,uBAAMS,SAAUZ,EAAMa,WAAtB,UACI,qBAAKV,UAAU,GAAf,SACI,uBACAW,KAAK,OACLC,KAAK,OACLC,YAAY,mBACZb,UAAU,aACVc,WAAS,MAGb,qBAAKd,UAAU,aAAf,SACI,uBACAW,KAAK,OACLC,KAAK,UACLC,YAAY,sBACZb,UAAU,oBAId,wBAAQA,UAAU,qBAAlB,gC,OC1BG,G,MAAA,IAA0B,mCCmE1Be,E,4MAxDbC,MAAQ,CACNd,YAAY,GACZG,YAAY,GACZC,SAAS,GACTW,WAAW,GACXd,KAAK,GACLC,QAAQ,GACRH,MAAM,M,EAIRS,W,uCAAa,WAAMQ,GAAN,6BAAAC,EAAA,yDACXD,EAAEE,iBADS,EAEeF,EAAEG,OAAOC,SAA3BnB,EAFG,EAEHA,KAAMC,EAFH,EAEGA,QACRmB,EAAYpB,EAAKqB,MACjBC,EAAerB,EAAQoB,OAE1BD,IAAaE,EANL,wBAOLC,EAPK,4DAO0DH,EAP1D,aAOwEE,EAPxE,kBAO8FE,cAP9F,0BAQYC,MAAMF,GARlB,cAQLG,EARK,iBASQA,EAASC,OATjB,QASLC,EATK,OAUXjC,QAAQC,IAAIgC,GAGZ,EAAKC,SAAS,CACZ9B,YAAa6B,EAAKE,KAAKC,KACvB7B,YAAa0B,EAAKI,QAAQ,GAAG9B,YAC7BC,SAASyB,EAAKE,KAAK3B,SACnBW,WAAYc,EAAKK,KAAKC,MACtBlC,KAAM4B,EAAKnB,KACXR,QAAS2B,EAAKO,IAAIlC,QAClBH,MAAM,OApBG,wBAwBX,EAAK+B,SAAS,CAAC/B,MAAM,sCAxBV,4C,kGAgCb,WACE,OACE,sBAAKD,UAAU,QAAf,UACI,qBAAMA,UAAU,YAAYuC,IAAKC,IACjC,sBAAKxC,UAAU,OAAf,UACE,cAAC,EAAD,CAAaU,WAAY+B,KAAK/B,aAC9B,cAAC,EAAD,eAAkB+B,KAAKzB,kB,GAnDjB0B,IAAMC,WCGTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,gBChBAc,EAAOC,QAAU,CACbhC,YAAa,sC","file":"static/js/main.0836322c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style/weatherInfo.css\";\n\nconst WeatherInfo = props => {\n\n    console.log(props)\n\n  \n\n    return (\n      <div className=\"props_info\"> \n                 {\n                     props.error && \n                        <div className=\"alert alert-danger\">\n                             <p>{props.error}</p>\n                        </div>\n                }\n                {\n                    props.temperature>0 ? \n                    <div className=\"card card-body\">\n           <p>\n               Location: {props.city}, {props.country} \n           </p>\n           <p className=\"props_hot\">\n               Temperature: {props.temperature}°C {props.description} \n           </p>\n           <p>\n               Humidity: {props.humidity}%\n           </p>      \n        </div>\n        :\n        <div>\n        </div>\n                }\n\n        {\n            props.temparature<=0 ?\n            <div className=\"card card-body\">\n            <p>\n                Location: {props.city}, {props.country} \n            </p>\n            <p className=\"props_cold\">\n                Temperature: {props.temperature}°C {props.description} \n            </p>\n            <p>\n                Humidity: {props.humidity}%\n            </p>      \n         </div>\n         :\n         <div>\n         </div>\n\n        }\n            \n    </div> \n        \n    )\n   \n\n}\n\n\nexport default WeatherInfo;","import React from \"react\";\n\nimport \"./style/WeatherForm.css\"\n\n\nconst WeatherForm = (props) => (\n    <div className=\"weatherForm\">\n        <form onSubmit={props.getWeather}>\n            <div className=\"\">\n                <input \n                type=\"text\" \n                name=\"city\" \n                placeholder=\"  Your City Name\" \n                className=\"city_input\"\n                autoFocus\n                />\n            </div>\n            <div className=\"form-group\">\n                <input \n                type=\"text\" \n                name=\"country\" \n                placeholder=\"  Your Country Name\"\n                className=\"country_input\"\n                />\n            </div>\n\n            <button className=\"weatherForm_button\">\n                Get Weather\n            </button>\n        </form>\n\n    </div>\n);\n\nexport default WeatherForm;","export default __webpack_public_path__ + \"static/media/cloud.643f2e4f.svg\";","import React, { Component } from \"react\";\nimport WeatherInfo from \"./components/WeatherInfo\";\nimport WeatherForm from \"./components/WeatherForm\";\nimport {WEATHER_KEY} from \"./Keys\";\nimport \"./App.css\";\nimport cloud from \"./images/cloud.svg\"\n\n\n\nclass App extends React.Component {\n\n  state = {\n    temperature: ``,\n    description: ``,\n    humidity: ``,\n    wind_speed: ``,\n    city: ``,\n    country: ``,\n    error:null\n\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const { city, country } = e.target.elements;\n    const cityValue = city.value;\n    const countryValue = country.value;\n\n    if(cityValue && countryValue) { \n    const API_URL = `https://api.openweathermap.org/data/2.5/weather?q=${cityValue}, ${countryValue}&appid=${WEATHER_KEY}&units=metric`;\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    console.log(data);\n\n\n    this.setState({\n      temperature: data.main.temp,\n      description: data.weather[0].description,\n      humidity:data.main.humidity ,\n      wind_speed: data.wind.speed,\n      city: data.name,\n      country: data.sys.country,\n      error:null\n  \n    });\n  } else {\n    this.setState({error: `Please enter a city and a country`})\n  }\n\n\n\n\n  }\n\n  render() {\n    return (\n      <div className=\"cloud\">\n          <img  className=\"cloud_img\" src={cloud}/>\n          <div className=\"form\">\n            <WeatherForm getWeather={this.getWeather}  />\n            <WeatherInfo  {...this.state} />\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\n    WEATHER_KEY: \"fe54bfda653b4bb4f9cfe43449aa2f57\"\n}"],"sourceRoot":""}